--- Exercicio 1 ---
select C.CLI_NOME, SUM(P.PARC_VALOR)
FROM MAT_CLIENTES C
INNER JOIN MAT_VENDAS V ON C.CLI_COD = V.VEN_COD
INNER JOIN MAT_PARCELA_RECEBER P ON P.VEN_COD = V.VEN_COD
WHERE P.PARC_DTPAGTO IS NULL AND P.PARC_DTVENCTO BETWEEN SYSDATE AND SYSDATE + 60
GROUP BY CLI_NOME

--- Exercicio 2 ---
UPDATE MAT_PARCELA_RECEBER
SET PARC_DTVENCTO = PARC_DTVENCTO - 40
WHERE VEN_COD IN (
  SELECT VEN_COD
  FROM MAT_VENDAS V
  INNER JOIN MAT_CLIENTES C ON V.CLI_COD = C.CLI_COD
  INNER JOIN MAT_CIDADES CID ON C.CID_COD_RESID = CID.CID_COD
  WHERE CID.EST_UF = 'PR'
);

--- Exercicio 3 ---
SELECT CID.EST_UF AS ESTADO,SUM(PR.PARC_VALOR) AS VALOR_TOTAL
FROM MAT_PARCELA_RECEBER PR
INNER JOIN MAT_VENDAS V ON PR.VEN_COD = V.VEN_COD
INNER JOIN MAT_CLIENTES C ON V.CLI_COD = C.CLI_COD
INNER JOIN MAT_CIDADES CID ON C.CID_COD_RESID = CID.CID_COD
WHERE PR.PARC_DTVENCTO < CURRENT_DATE AND PR.PARC_DTPAGTO IS NULL
GROUP BY CID.EST_UF
ORDER BY VALOR_TOTAL DESC;

--- Exercicio 4 ---
UPDATE MAT_CLIENTES SET CID_COD_RESID = NULL  WHERE CLI_COD IN (2,4,10,15,21);
COMMIT;

--- Exercicio 5 ---
SELECT C.CLI_NOME, CID.CID_NOME
FROM MAT_CIDADES CID
RIGHT JOIN MAT_CLIENTES C ON C.CID_COD_RESID = CID.CID_COD;

--- Exercicio 6 ---
SELECT C.CLI_NOME, DECODE(CID_NOME, NULL, '-- NAO INFORMADO --', CID_NOME) AS CID_NOME
FROM MAT_CLIENTES C
LEFT JOIN MAT_CIDADES CID ON C.CID_COD_RESID = CID.CID_COD;

--- Exercicio 7 ---
SELECT CID.CID_NOME, COUNT(C.CLI_COD) AS QTD_CLIENTES
FROM MAT_CIDADES CID
LEFT JOIN MAT_CLIENTES C ON CID.CID_COD = C.CID_COD_RESID
GROUP BY CID.CID_NOME;

--- Exercicio 8 ---
SELECT COUNT(C.CLI_COD) AS QTD_CLIENTES
FROM MAT_CLIENTES C
INNER JOIN MAT_CIDADES CID ON C.CID_COD_RESID = CID.CID_COD
WHERE CID.EST_UF = 'SP';

--- Exercicio 9 ---
SELECT 'CIDADE' AS TIPO, CID.CID_NOME AS NOME, SUM(V.VEN_TOTAL) AS TOTAL_VENDAS
FROM MAT_VENDAS V
INNER JOIN MAT_CLIENTES C ON V.CLI_COD = C.CLI_COD
INNER JOIN MAT_CIDADES CID ON C.CID_COD_RESID = CID.CID_COD
GROUP BY CID.CID_NOME
UNION ALL
SELECT 'CLIENTE' AS TIPO, C.CLI_NOME AS NOME, SUM(V.VEN_TOTAL) AS TOTAL_VENDAS
FROM MAT_VENDAS V
INNER JOIN MAT_CLIENTES C ON V.CLI_COD = C.CLI_COD
GROUP BY C.CLI_NOME;


--- Exercicio 10 ---
SELECT 'CLIENTE/SP' AS TIPO, C.CLI_NOME AS NOME, SUM(V.VEN_TOTAL) AS TOTAL_VENDAS
FROM MAT_VENDAS V
INNER JOIN MAT_CLIENTES C ON V.CLI_COD = C.CLI_COD
INNER JOIN MAT_CIDADES CID ON C.CID_COD_RESID = CID.CID_COD
WHERE CID.EST_UF = 'SP'
GROUP BY C.CLI_NOME
UNION ALL 
SELECT 'CLIENTE > 15000' AS TIPO, C.CLI_NOME AS NOME, SUM(V.VEN_TOTAL) AS TOTAL_VENDAS
FROM MAT_VENDAS V
INNER JOIN MAT_CLIENTES C ON V.CLI_COD = C.CLI_COD
WHERE V.VEN_TOTAL > 15000
GROUP BY C.CLI_NOME

--- Exercicio 11 ---
SELECT C.CLI_NOME AS NOME, SUM(V.VEN_TOTAL)
FROM MAT_VENDAS V
INNER JOIN MAT_CLIENTES C ON V.CLI_COD = C.CLI_COD
INNER JOIN MAT_CIDADES CID ON C.CID_COD_RESID = CID.CID_COD
WHERE CID.CID_COD NOT IN
    (
        SELECT CID.CID_COD
        FROM MAT_VENDAS V
        INNER JOIN MAT_CLIENTES C ON V.CLI_COD = C.CLI_COD
        INNER JOIN MAT_CIDADES CID ON C.CID_COD_RESID = CID.CID_COD
        GROUP BY CID.CID_COD
        HAVING SUM(V.VEN_TOTAL) > 30000
    )
GROUP BY C.CLI_NOME;

--- Exercicio 12 ---
SELECT DISTINCT C.CID_COD_RESID AS CODIGO_CIDADE
FROM MAT_CLIENTES C;

--- Exercicio 13 ---
ALTER TABLE MAT_CLIENTES ADD(STATUS CHAR(1));    

--- Exercicio 14 ---
UPDATE MAT_CLIENTES
SET STATUS = 'X'
WHERE CLI_COD NOT IN (
    SELECT DISTINCT V.CLI_COD
    FROM MAT_VENDAS V
    WHERE V.VEN_DATA >= SYSDATE - 180
);

--- Exercicio 15 ---
SELECT C.CLI_NOME AS NOME_CLIENTE, SUM(P.PARC_VALOR) AS TOTAL_EM_ABERTO
FROM MAT_PARCELA_RECEBER P
INNER JOIN MAT_VENDAS V ON P.VEN_COD = V.VEN_COD
INNER JOIN MAT_CLIENTES C ON V.CLI_COD = C.CLI_COD
WHERE P.PARC_DTPAGTO IS NULL AND P.PARC_DTVENCTO BETWEEN SYSDATE - 180 AND SYSDATE
GROUP BY C.CLI_NOME;

--- Exercicio 16 ---
SELECT TO_CHAR(P.PARC_DTPAGTO, 'MM/YY') AS MES, SUM(P.PARC_VALOR) AS TOTAL
FROM MAT_PARCELA_RECEBER P
WHERE TO_CHAR(P.PARC_DTPAGTO, 'YY') = TO_CHAR(SYSDATE, 'YY')
GROUP BY TO_CHAR(P.PARC_DTPAGTO, 'MM/YY')
ORDER BY TO_CHAR(P.PARC_DTPAGTO, 'MM/YY');

--- Exercicio 17 ---
SELECT C.CLI_NOME AS NOME_CLIENTE, COUNT(V.VEN_COD) AS TOTAL_VENDAS
FROM MAT_CLIENTES C 
LEFT JOIN MAT_VENDAS V ON C.CLI_COD = V.CLI_COD AND V.VEN_DATA >= ADD_MONTHS(SYSDATE, -3)
GROUP BY C.CLI_NOME
HAVING COUNT(V.VEN_COD) < 2
ORDER BY TOTAL_VENDAS;

--- Exercicio 18 ---
SELECT P.PRO_COD, P.PRO_NOME, P.PRO_ESTOQUE,
    CASE 
        WHEN SUM(CASE WHEN V.VEN_DATA >= SYSDATE - 90 THEN IT.IT_QUANT END) IS NULL THEN 0
        ELSE ROUND(SUM(CASE WHEN V.VEN_DATA >= SYSDATE - 90 THEN IT.IT_QUANT END) / 3, 2)
    END AS MEDIA_MENSAL_VENDAS
FROM MAT_PRODUTOS P
LEFT JOIN MAT_ITENSVENDAS IT ON P.PRO_COD = IT.PRO_COD
LEFT JOIN MAT_VENDAS V ON IT.VEN_COD = V.VEN_COD
GROUP BY P.PRO_COD, P.PRO_NOME, P.PRO_ESTOQUE
ORDER BY P.PRO_COD;

--- Exercicio 19 ---
SELECT C.CLI_NOME, SUM(V.VEN_TOTAL) AS TOTAL_VENDAS
FROM MAT_CLIENTES C
JOIN MAT_VENDAS V ON C.CLI_COD = V.CLI_COD
WHERE TO_CHAR(V.VEN_DATA, 'YYYY') = TO_CHAR(SYSDATE, 'YYYY')
GROUP BY C.CLI_NOME
ORDER BY TOTAL_VENDAS DESC;

--- Exercicio 20 ---
SELECT P.PRO_COD, P.PRO_NOME AS DESCRICAO, SUM(IT.IT_QUANT * IT.IT_PRVENDA) AS VALOR_TOTAL_DO_PRODUTO
FROM MAT_PRODUTOS P
INNER JOIN MAT_ITENSVENDAS IT ON P.PRO_COD = IT.PRO_COD
GROUP BY P.PRO_COD, P.PRO_NOME
ORDER BY P.PRO_COD;

--- Exercicio 21 ---
SELECT P.PRO_COD, P.PRO_NOME AS DESCRICAO, SUM(IT.IT_QUANT * IT.IT_PRVENDA) AS VALOR_TOTAL_DO_PRODUTO
FROM MAT_PRODUTOS P
INNER JOIN MAT_ITENSVENDAS IT ON P.PRO_COD = IT.PRO_COD
JOIN MAT_VENDAS V ON IT.VEN_COD = V.VEN_COD
WHERE 
    V.VEN_DATA BETWEEN TO_DATE('01/01/24', 'DD/MM/YY') AND TO_DATE('01/07/24', 'DD/MM/YY')
GROUP BY P.PRO_COD, P.PRO_NOME
ORDER BY P.PRO_COD;

--- Exercicio 22 ---
SELECT P.PRO_COD, P.PRO_NOME AS DESCRICAO, SUM(IT.IT_QUANT * IT.IT_PRVENDA) AS VALOR_TOTAL_DO_PRODUTO
FROM MAT_PRODUTOS P
INNER JOIN MAT_ITENSVENDAS IT ON P.PRO_COD = IT.PRO_COD
JOIN MAT_VENDAS V ON IT.VEN_COD = V.VEN_COD
WHERE V.VEN_DATA BETWEEN TO_DATE('01/01/24', 'DD/MM/YY') AND TO_DATE('01/07/24', 'DD/MM/YY')
HAVING SUM(IT.IT_QUANT * IT.IT_PRVENDA) >= 30000
GROUP BY P.PRO_COD, P.PRO_NOME
ORDER BY P.PRO_COD;

--- Exercicio 23 ---
WITH AUX AS 
    (
        SELECT P.PRO_COD,P.PRO_NOME AS DESCRICAO,SUM(IT.IT_QUANT * IT.IT_PRVENDA) AS VALOR_TOTAL_VENDIDO
        FROM MAT_PRODUTOS P
        INNER JOIN MAT_ITENSVENDAS IT ON P.PRO_COD = IT.PRO_COD
        INNER JOIN MAT_VENDAS V ON IT.VEN_COD = V.VEN_COD
        WHERE V.VEN_DATA BETWEEN TO_DATE('01/01/23', 'DD/MM/YY') AND TO_DATE('31/12/24', 'DD/MM/YY')
        GROUP BY P.PRO_COD, P.PRO_NOME
    )
SELECT PRO_COD,DESCRICAO,VALOR_TOTAL_VENDIDO
FROM AUX
WHERE VALOR_TOTAL_VENDIDO = (SELECT MIN(VALOR_TOTAL_VENDIDO) FROM AUX);
